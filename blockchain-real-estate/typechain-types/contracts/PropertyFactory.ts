/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PropertyFactory {
  export type PropertyInfoStruct = {
    tokenAddress: AddressLike;
    isApproved: boolean;
  };

  export type PropertyInfoStructOutput = [
    tokenAddress: string,
    isApproved: boolean
  ] & { tokenAddress: string; isApproved: boolean };
}

export interface PropertyFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveProperty"
      | "approvedProperties"
      | "createProperty"
      | "eurcTokenAddress"
      | "getPropertyCreators"
      | "getPropertyStatus"
      | "getUserProperties"
      | "owner"
      | "rejectProperty"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateEURCToken"
      | "userProperties"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EURCTokenUpdated"
      | "OwnershipTransferred"
      | "PropertyApproved"
      | "PropertyRejected"
      | "PropertySubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approveProperty",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedProperties",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createProperty",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eurcTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPropertyCreators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPropertyStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserProperties",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rejectProperty",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEURCToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userProperties",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eurcTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPropertyCreators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPropertyStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rejectProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEURCToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userProperties",
    data: BytesLike
  ): Result;
}

export namespace EURCTokenUpdatedEvent {
  export type InputTuple = [newAddress: AddressLike];
  export type OutputTuple = [newAddress: string];
  export interface OutputObject {
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PropertyApprovedEvent {
  export type InputTuple = [tokenAddress: AddressLike];
  export type OutputTuple = [tokenAddress: string];
  export interface OutputObject {
    tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PropertyRejectedEvent {
  export type InputTuple = [tokenAddress: AddressLike];
  export type OutputTuple = [tokenAddress: string];
  export interface OutputObject {
    tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PropertySubmittedEvent {
  export type InputTuple = [owner: AddressLike, tokenAddress: AddressLike];
  export type OutputTuple = [owner: string, tokenAddress: string];
  export interface OutputObject {
    owner: string;
    tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PropertyFactory extends BaseContract {
  connect(runner?: ContractRunner | null): PropertyFactory;
  waitForDeployment(): Promise<this>;

  interface: PropertyFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveProperty: TypedContractMethod<
    [_propertyAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  approvedProperties: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  createProperty: TypedContractMethod<
    [
      _title: string,
      _description: string,
      _location: string,
      _imageUrl: string,
      _price: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  eurcTokenAddress: TypedContractMethod<[], [string], "view">;

  getPropertyCreators: TypedContractMethod<[], [string[]], "view">;

  getPropertyStatus: TypedContractMethod<
    [_propertyAddress: AddressLike],
    [boolean],
    "view"
  >;

  getUserProperties: TypedContractMethod<
    [_user: AddressLike],
    [PropertyFactory.PropertyInfoStructOutput[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  rejectProperty: TypedContractMethod<
    [_propertyAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateEURCToken: TypedContractMethod<
    [_newEURCToken: AddressLike],
    [void],
    "nonpayable"
  >;

  userProperties: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[string, boolean] & { tokenAddress: string; isApproved: boolean }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveProperty"
  ): TypedContractMethod<[_propertyAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approvedProperties"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "createProperty"
  ): TypedContractMethod<
    [
      _title: string,
      _description: string,
      _location: string,
      _imageUrl: string,
      _price: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eurcTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPropertyCreators"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPropertyStatus"
  ): TypedContractMethod<[_propertyAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getUserProperties"
  ): TypedContractMethod<
    [_user: AddressLike],
    [PropertyFactory.PropertyInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rejectProperty"
  ): TypedContractMethod<[_propertyAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateEURCToken"
  ): TypedContractMethod<[_newEURCToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userProperties"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[string, boolean] & { tokenAddress: string; isApproved: boolean }],
    "view"
  >;

  getEvent(
    key: "EURCTokenUpdated"
  ): TypedContractEvent<
    EURCTokenUpdatedEvent.InputTuple,
    EURCTokenUpdatedEvent.OutputTuple,
    EURCTokenUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PropertyApproved"
  ): TypedContractEvent<
    PropertyApprovedEvent.InputTuple,
    PropertyApprovedEvent.OutputTuple,
    PropertyApprovedEvent.OutputObject
  >;
  getEvent(
    key: "PropertyRejected"
  ): TypedContractEvent<
    PropertyRejectedEvent.InputTuple,
    PropertyRejectedEvent.OutputTuple,
    PropertyRejectedEvent.OutputObject
  >;
  getEvent(
    key: "PropertySubmitted"
  ): TypedContractEvent<
    PropertySubmittedEvent.InputTuple,
    PropertySubmittedEvent.OutputTuple,
    PropertySubmittedEvent.OutputObject
  >;

  filters: {
    "EURCTokenUpdated(address)": TypedContractEvent<
      EURCTokenUpdatedEvent.InputTuple,
      EURCTokenUpdatedEvent.OutputTuple,
      EURCTokenUpdatedEvent.OutputObject
    >;
    EURCTokenUpdated: TypedContractEvent<
      EURCTokenUpdatedEvent.InputTuple,
      EURCTokenUpdatedEvent.OutputTuple,
      EURCTokenUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PropertyApproved(address)": TypedContractEvent<
      PropertyApprovedEvent.InputTuple,
      PropertyApprovedEvent.OutputTuple,
      PropertyApprovedEvent.OutputObject
    >;
    PropertyApproved: TypedContractEvent<
      PropertyApprovedEvent.InputTuple,
      PropertyApprovedEvent.OutputTuple,
      PropertyApprovedEvent.OutputObject
    >;

    "PropertyRejected(address)": TypedContractEvent<
      PropertyRejectedEvent.InputTuple,
      PropertyRejectedEvent.OutputTuple,
      PropertyRejectedEvent.OutputObject
    >;
    PropertyRejected: TypedContractEvent<
      PropertyRejectedEvent.InputTuple,
      PropertyRejectedEvent.OutputTuple,
      PropertyRejectedEvent.OutputObject
    >;

    "PropertySubmitted(address,address)": TypedContractEvent<
      PropertySubmittedEvent.InputTuple,
      PropertySubmittedEvent.OutputTuple,
      PropertySubmittedEvent.OutputObject
    >;
    PropertySubmitted: TypedContractEvent<
      PropertySubmittedEvent.InputTuple,
      PropertySubmittedEvent.OutputTuple,
      PropertySubmittedEvent.OutputObject
    >;
  };
}
